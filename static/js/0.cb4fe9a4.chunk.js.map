{"version":3,"sources":["forms/InputWithForm/styles.module.scss","components/Loader/styles.module.scss","components/FullLoader/styles.module.scss","modules/Auth/pages/Auth/styles.module.scss","forms/InputWithForm/index.jsx","components/Loader/index.jsx","components/FullLoader/index.jsx","modules/Auth/pages/Auth/validate.js","modules/Auth/pages/Auth/index.jsx","modules/Auth/pages/Auth/bindings.js"],"names":["module","exports","InputWithForm","name","props","format","value","toString","trim","formatOnBlur","input","meta","hasError","error","submitError","touched","className","styles","field","Input","errorText","memo","LoaderRaw","hasText","width","height","skin","container","cn","wheel","style","text","defaultProps","Loader","FullLoader","loader","values","errors","username","password","Auth","actions","useMapActions","authUser","authThunks","login","onSubmit","useCallback","a","accessToken","form","validate","render","handleSubmit","submitting","pristine","noValidate","InputRow","label","type","autoComplete","BaseButton","disabled","isFull"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,UAAY,4B,oBCA5DD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,mBAAqB,mCAAmC,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,SAAW,yBAAyB,UAAY,4B,oBCApRD,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,uB,oLC2BzDC,EApBmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAASC,EAAY,wBAC/C,OACE,kBAAC,IAAD,CAAOD,KAAMA,EAAME,OAAQ,eAACC,EAAD,uDAAS,GAAT,OAAgBA,GAASA,EAAMC,WAAWC,QAAQC,cAAY,IACtF,YAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACHC,GAAYD,EAAKE,OAASF,EAAKG,cAAgBH,EAAKI,QAC1D,OACE,yBAAKC,UAAWC,IAAOC,OACrB,kBAACC,EAAA,EAAD,iBAAWT,EAAWN,EAAtB,CAA6BQ,SAAUA,KACtCA,GAAY,yBAAKI,UAAWC,IAAOG,WAAYT,EAAKE,OAASF,EAAKG,kBAahEO,iBAAKnB,G,kCCvBdoB,EAAY,SAAClB,GAAW,IACpBmB,EAAiCnB,EAAjCmB,QAASC,EAAwBpB,EAAxBoB,MAAOC,EAAiBrB,EAAjBqB,OAAQC,EAAStB,EAATsB,KAChC,OACE,yBAAKV,UAAWC,IAAOU,WACrB,yBAAKX,UAAWY,IAAGX,IAAOY,MAAOZ,IAAOS,IAAQI,MAAO,CAAEN,MAAOA,EAAQ,KAAMC,OAAQA,EAAS,QAC9FF,GAAW,yBAAKP,UAAWY,IAAGX,IAAOc,KAAMd,IAAO,GAAD,OAAIS,EAAJ,WAAtC,gBAYlBJ,EAAUU,aAAe,CACvBR,MAAO,GACPC,OAAQ,GACRC,KAAM,QAGR,IAAMO,EAASX,EACAD,iBAAKY,G,kBChBPC,EARS,SAAC9B,GACrB,OACE,yBAAKY,UAAWC,IAAOkB,QACrB,kBAAC,EAAW/B,KAMHiB,iBAAKa,GCfL,WAACE,GACd,IAAMC,EAAS,GAUf,OARKD,EAAOE,WACVD,EAAOC,SAAW,kBAGfF,EAAOG,WACVF,EAAOE,SAAW,kBAGbF,G,iCC6CIG,EA5CG,WACd,IAAMC,ECTCC,YAAc,CACnBC,SAAUC,IAAWD,SACrBE,MAAOD,IAAWC,QDSdC,EAAWC,sBAAW,uCAC1B,WAAOX,GAAP,eAAAY,EAAA,sEAC4BP,EAAQE,SAASP,GAD7C,YACQa,EADR,wBAIIR,EAAQI,MAAMI,GAJlB,+CAMW,CAAEX,SAAU,mBAAoBC,SAAU,qBANrD,2CAD0B,sDAU1B,CAACE,IAGH,OACE,yBAAKzB,UAAWC,IAAOU,WACrB,yBAAKX,UAAWC,IAAOiC,MACrB,kBAAC,IAAD,CACEC,SAAUA,EACVL,SAAUA,EACVM,OAAQ,YAA6C,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACnC,OACE,0BAAMT,SAAUO,EAAcG,YAAU,GACrCF,GAAc,kBAAC,EAAD,CAAY/B,SAAO,IAClC,6BACE,kBAACkC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAetD,KAAK,WAAWuD,MAAM,eAEvC,kBAACD,EAAA,EAAD,KACE,kBAAC,EAAD,CAAeE,KAAK,WAAWxD,KAAK,WAAWuD,MAAM,WAAWE,aAAa,QAE/E,kBAACC,EAAA,EAAD,CAAYF,KAAK,SAAS5B,KAAK,UAAUL,KAAK,SAASoC,SAAUR,GAAcC,EAAUQ,QAAM,YAYlG1C,yBAAKmB","file":"static/js/0.cb4fe9a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"styles_field__3l6a1\",\"errorText\":\"styles_errorText__idSYL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3cvvO\",\"wheel\":\"styles_wheel__HEmTz\",\"rotateCircleLoader\":\"styles_rotateCircleLoader__1eEmJ\",\"dark\":\"styles_dark__3NI-6\",\"light\":\"styles_light__1mJrr\",\"text\":\"styles_text__3SmJo\",\"darkText\":\"styles_darkText__2c-jL\",\"lightText\":\"styles_lightText__3sJvX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__3B30l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__25F6X\",\"form\":\"styles_form__2rVZk\"};","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Field } from 'react-final-form'\n\nimport Input from '../Input'\n\nimport styles from './styles.module.scss'\n\nconst InputWithFormRaw = ({ name, ...props }) => {\n  return (\n    <Field name={name} format={(value = '') => value && value.toString().trim()} formatOnBlur>\n      {({ input, meta }) => {\n        const hasError = (meta.error || meta.submitError) && meta.touched\n        return (\n          <div className={styles.field}>\n            <Input {...input} {...props} hasError={hasError} />\n            {hasError && <div className={styles.errorText}>{meta.error || meta.submitError}</div>}\n          </div>\n        )\n      }}\n    </Field>\n  )\n}\n\nInputWithFormRaw.propTypes = {\n  name: PropTypes.string.isRequired,\n}\n\nconst InputWithForm = InputWithFormRaw\nexport default memo(InputWithForm)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport cn from 'classnames'\n\nimport styles from './styles.module.scss'\n\nconst LoaderRaw = (props) => {\n  const { hasText, width, height, skin } = props\n  return (\n    <div className={styles.container}>\n      <div className={cn(styles.wheel, styles[skin])} style={{ width: width + 'px', height: height + 'px' }} />\n      {hasText && <div className={cn(styles.text, styles[`${skin}Text`])}>loading...</div>}\n    </div>\n  )\n}\n\nLoaderRaw.propTypes = {\n  hasText: PropTypes.bool,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  skin: PropTypes.string,\n}\n\nLoaderRaw.defaultProps = {\n  width: 20,\n  height: 20,\n  skin: 'dark',\n}\n\nconst Loader = LoaderRaw\nexport default memo(Loader)\n","import React, { memo } from 'react'\n\nimport Loader from 'src/components/Loader'\n\nimport styles from './styles.module.scss'\n\nconst FullLoaderRaw = (props) => {\n  return (\n    <div className={styles.loader}>\n      <Loader {...props} />\n    </div>\n  )\n}\n\nexport const FullLoader = FullLoaderRaw\nexport default memo(FullLoader)\n","export default (values) => {\n  const errors = {}\n\n  if (!values.username) {\n    errors.username = 'Required field'\n  }\n\n  if (!values.password) {\n    errors.password = 'Required field'\n  }\n\n  return errors\n}\n","import React, { memo, useCallback } from 'react'\nimport { Form } from 'react-final-form'\n\nimport BaseButton from 'src/components/BaseButton'\nimport InputRow from 'src/forms/InputRow'\nimport InputWithForm from 'src/forms/InputWithForm'\nimport FullLoader from 'src/components/FullLoader'\n\nimport validate from './validate'\nimport styles from './styles.module.scss'\nimport { useMappedActions } from './bindings'\n\nconst AuthRaw = () => {\n  const actions = useMappedActions()\n\n  const onSubmit = useCallback(\n    async (values) => {\n      const accessToken = await actions.authUser(values)\n\n      if (accessToken) {\n        actions.login(accessToken)\n      } else {\n        return { username: 'Invalid username', password: 'Invalid password' }\n      }\n    },\n    [actions],\n  )\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.form}>\n        <Form\n          validate={validate}\n          onSubmit={onSubmit}\n          render={({ handleSubmit, submitting, pristine }) => {\n            return (\n              <form onSubmit={handleSubmit} noValidate>\n                {submitting && <FullLoader hasText />}\n                <div>\n                  <InputRow>\n                    <InputWithForm name=\"username\" label=\"User name\" />\n                  </InputRow>\n                  <InputRow>\n                    <InputWithForm type=\"password\" name=\"password\" label=\"Password\" autoComplete=\"on\" />\n                  </InputRow>\n                  <BaseButton type=\"submit\" text=\"Sign in\" skin=\"yellow\" disabled={submitting || pristine} isFull />\n                </div>\n              </form>\n            )\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const Auth = AuthRaw\nexport default memo(Auth)\n","import { useMapActions } from 'src/hooks'\nimport { authThunks } from 'src/thunks'\n\nexport const useMappedActions = () => {\n  return useMapActions({\n    authUser: authThunks.authUser,\n    login: authThunks.login,\n  })\n}\n"],"sourceRoot":""}